---

# project information
project_name: steamos
project_url: "https://www.steamdeck.com/"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/steamos-logo.png"
project_blurb: "[SteamOS]({{ project_url }}) is an Arch based Linux distribution made by Valve Software. This container is a vanilla Arch install with Steam repositories added for software support. **This container will only work with modern AMD/Intel GPUs on a real Linux Host**"
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"
project_categories: "Games"
project_blurb_optional_extras_enabled: false
# supported architectures
available_architectures:
  - {arch: "{{ arch_x86_64 }}", tag: "latest"}
# development version
development_versions: false
# container parameters
common_param_env_vars_enabled: true
param_container_name: "{{ project_name }}"
param_usage_include_env: true
param_env_vars:
  - {env_var: "TZ", env_value: "Europe/London", desc: "Specify a timezone to use EG Europe/London."}
  - {env_var: "DRINODE", env_value: "/dev/dri/renderD128", desc: "Specify the render device (GPU) for the contianer to use."}
opt_param_usage_include_env: true
opt_param_env_vars:
  - {env_var: "HOST_IP", env_value: "192.168.100.10", desc: "Specify the IP of the host, needed for LAN Remote Play."}
  - {env_var: "STARTUP", env_value: "KDE", desc: "KDE to boot into desktop mode, BIGPICTURE to boot into gamescope."}
  - {env_var: "RESOLUTION", env_value: "1920x1080", desc: "When booting into BIGPICTURE mode the screen resolution will be bound to this value."}
  - {env_var: "DO_NOT_RESIZE_KASM", env_value: "true", desc: "This prohibits the kasm client from resizing the window when opened in a webpage."}

param_usage_include_vols: true
param_volumes:
  - {vol_path: "/config", vol_host_path: "/path/to/config", desc: "Users home directory in the container, stores all files and games."}
param_usage_include_ports: true
param_ports:
  - {external_port: "3000", internal_port: "3000", port_desc: "SteamOS desktop gui."}
  - {external_port: "3001", internal_port: "3001", port_desc: "HTTPS SteamOS desktop gui."}
opt_param_usage_include_ports: true
opt_param_ports:
  - {external_port: "27031-27036", internal_port: "27031-27036/udp", port_desc: "Steam Remote Play Ports (UDP)."}
  - {external_port: "27031-27036", internal_port: "27031-27036", port_desc: "Steam Remote Play Ports (TCP)."}
  - {external_port: "47984-47990", internal_port: "47984-47990", port_desc: "Sunshine Ports (TCP)."}
  - {external_port: "48010-48010", internal_port: "48010-48010", port_desc: "Sunshine Ports (TCP)."}
  - {external_port: "47998-48000", internal_port: "47998-48000/udp", port_desc: "Sunshine Ports (UDP)."}
custom_params:
  - {name: "shm-size", name_compose: "shm_size", value: "1gb", desc: "This is needed for the steam browser to function properly."}
security_opt_param: true
security_opt_param_vars:
  - {run_var: "seccomp=unconfined", compose_var: "seccomp:unconfined", desc: "This is needed to allow kernel syscalls made by Steam."}
opt_security_opt_param: true
opt_security_opt_param_vars:
  - {run_var: "apparmor=unconfined", compose_var: "apparmor:unconfined", desc: "For Debian/Ubuntu hosts Steam needs elevated perms that AppArmor blocks."}
opt_param_usage_include_vols: true
opt_param_volumes:
  - {vol_path: "/dev/input", vol_host_path: "/dev/input", desc: "Optional for gamepad support. *Only working for Steam Remote Play"}
  - {vol_path: "/run/udev/data", vol_host_path: "/run/udev/data", desc: "Optional for gamepad support. *Only working for Steam Remote Play"}
param_device_map: true
param_devices:
  - {device_host_path: "/dev/dri", device_path: "/dev/dri", desc: "Video card passthrough to Steam."}
param_usage_include_hostname: "optional"
param_hostname: "hostname"
param_hostname_desc: "Specify the hostname of the host, this is useful for keeping a persistent hostname between upgrades and identifying the server in the remote play Steam Client."
cap_add_param: true
cap_add_param_vars:
  - {cap_add_var: "NET_ADMIN", desc: ""}
# application setup block
app_setup_block_enabled: true
app_setup_block: |
  *This container is currently in a Beta state and is developing quickly, things will change constantly and it may crash or not function perfectly especially when mixing Steam remote play frame capture with the web based [KasmVNC](https://kasmweb.com/kasmvnc) frame capture*

  **SteamOS is designed for specific AMD based hardware, this container will only work fully on a host with a modern AMD GPU, Intel ARC/iGPU**

  The following limitations currently exist:
  * You must run the desktop mode initially to login to Steam, then you can switch to `STARTUP=BIGPICTURE`
  * Sunshine is available in both desktop mode (KDE) and BIGPICTURE, but gamepads using Sunshine does not currently work.
  * In Desktop mode most proton games will kill off kwin_x11 and in turn disable keyboard and gamepad input. For remote play in Desktop mode it is mostly Valve or Linux native titles that function properly.
  * If games are not launching and are Windows based ensure you have forced a compatibility layer in it's settings to use Proton Experimental or Proton 8.
  * BIGPICTURE STARTUP mode connecting via Sunshine will have much better game compatibility and generally be less buggy. Titles are running how the Steam Deck expects them to inside a gamescope renderer, outside of the lack of gamepads this works identically to a Deck.
  * Sunshine auto discovery is not functional, you will need to manually enter the IP in your client.
  * Remote play does not function well in BIGPICTURE mode, this mode is optimized for a single resolution passed on boot using Sunshine.

  To improve compatibility we ingest drivers from vanilla Arch repos, The best experience will be with [DRI3](https://en.wikipedia.org/wiki/Direct_Rendering_Infrastructure) framework which is not available for NVIDIA. We recommend using a modern RDNA AMD card or Intel ARC card, but lower end GPUs might work for some games we do bundle all the drivers that are possible to install.
  Compatibility should be on par with the Steam Deck, if it is certified for the Deck it will run in our testing and the game should be fully playable.

  **Nvidia can work with additional "Launch Options" for games that need OpenGL support:**

  ```
  LIBGL_KOPPER_DRI2=1 MESA_LOADER_DRIVER_OVERRIDE=zink GALLIUM_DRIVER=zink %command%
  ```

  This should be used in tandem with `--gpus all --runtime nvidia` in the Docker run settings.

  The application can be accessed at:

  * http://yourhost:3000/
  * https://yourhost:3001/

  ### Options in all KasmVNC based GUI containers

  This container is based on [Docker Baseimage KasmVNC](https://github.com/linuxserver/docker-baseimage-kasmvnc) which means there are additional environment variables and run configurations to enable or disable specific functionality.

  #### Optional environment variables

  | Variable | Description |
  | :----: | --- |
  | CUSTOM_PORT | Internal port the container listens on for http if it needs to be swapped from the default 3000. |
  | CUSTOM_HTTPS_PORT | Internal port the container listens on for https if it needs to be swapped from the default 3001. |
  | CUSTOM_USER | HTTP Basic auth username, abc is default. |
  | PASSWORD | HTTP Basic auth password, abc is default. If unset there will be no auth |
  | SUBFOLDER | Subfolder for the application if running a subfolder reverse proxy, need both slashes IE `/subfolder/` |
  | TITLE | The page title displayed on the web browser, default "KasmVNC Client". |
  | FM_HOME | This is the home directory (landing) for the file manager, default "/config". |
  | DRINODE | If mounting in /dev/dri for [DRI3 GPU Acceleration](https://www.kasmweb.com/kasmvnc/docs/master/gpu_acceleration.html) allows you to specify the device to use IE `/dev/dri/renderD128` |

  ### Networking

  **Windows users will need to disable their firewall for remote play to function in the default setup**

  **The Steam Link application will only function in Host or Macvlan networking modes**

  Steam network discovery in it's current state is pretty inflexible, to function locally it uses broadcast packets that cannot traverse subnets and this becomes a problem when using a Docker subnet. In the default configuration we recommend forwarding the ports and passing the underlying host's IP using the `HOST_IP` environment variable. When the container spins up it will set this IP as it's default route allowing remote play to function over a local network given the client does not have a firewall in the way blocking the traffic. If you never plan to use remote play or only plan on using it fully remote off your LAN through a Valve relay then you can essentially rip out all the logic for Steam port forwarding and passing the host ip to the container.

  Optimally [Macvlan](https://docs.docker.com/network/drivers/macvlan/) can be used to give this container a dedicated IP on your network and run closer to how a bridged VM would. This is the most compatible methodology and will avoid any potentially port conflicts.

  [Host Networking](https://docs.docker.com/network/drivers/host/) can also be used, but might run into a port conflict with what the container is trying to init and the underlying host.

  ### Gameplay

  Keep in mind this container thinks it is a Steam Deck, games will be optimized for it's controller layout and video settings. To get a desktop Steam experience for remote play or testing there is a desktop shortcut provided `Steam Desktop Mode`.
  Most games will tie themselves to the current desktop resolution as set when you connect to the web interface, a method for setting the resolution via the web interface is being worked on.
  Authentication (not two factor) is not currently saved when closing and re-opening Steam for any reason when in Deck mode this is also being worked on. This means anytime you restart the container you will need to access the web interface and log back in.
  It is possible to play games over KasmVNC, but it as a protocol is not currently optimized for gaming. You will experience more frame skipping and latency as compared to Steam remote play.
# init diagram
init_diagram: |
  "steamos:latest": {
    docker-mods
    base {
      fix-attr +\nlegacy cont-init
    }
    docker-mods -> base
    legacy-services
    custom services
    init-services -> legacy-services
    init-services -> custom services
    custom services -> legacy-services
    legacy-services -> ci-service-check
    init-migrations -> init-adduser
    init-kasmvnc-end -> init-config
    init-os-end -> init-config
    init-config -> init-config-end
    init-crontab-config -> init-config-end
    init-config -> init-crontab-config
    init-mods-end -> init-custom-files
    base -> init-envfile
    init-os-end -> init-kasmvnc
    init-nginx -> init-kasmvnc-config
    init-video -> init-kasmvnc-end
    base -> init-migrations
    init-config-end -> init-mods
    init-mods-package-install -> init-mods-end
    init-mods -> init-mods-package-install
    init-kasmvnc -> init-nginx
    init-adduser -> init-os-end
    init-envfile -> init-os-end
    init-custom-files -> init-services
    init-kasmvnc-config -> init-video
    init-services -> svc-cron
    svc-cron -> legacy-services
    init-services -> svc-de
    svc-nginx -> svc-de
    svc-de -> legacy-services
    init-services -> svc-docker
    svc-de -> svc-docker
    svc-docker -> legacy-services
    init-services -> svc-kasmvnc
    svc-pulseaudio -> svc-kasmvnc
    svc-kasmvnc -> legacy-services
    init-services -> svc-kclient
    svc-kasmvnc -> svc-kclient
    svc-kclient -> legacy-services
    init-services -> svc-nginx
    svc-kclient -> svc-nginx
    svc-nginx -> legacy-services
    init-services -> svc-pulseaudio
    svc-pulseaudio -> legacy-services
  }
  Base Images: {
    "baseimage-kasmvnc:arch" <- "baseimage-arch:latest"
  }
  "steamos:latest" <- Base Images
# changelog
changelogs:
  - {date: "23.05.24:", desc: "Document how to get Nvidia to work."}
  - {date: "15.01.24:", desc: "Install gperftools to fix source games."}
  - {date: "29.11.23:", desc: "Switch to openbox for bigpicture mode."}
  - {date: "06.10.23:", desc: "Ingest sunshine from AUR to compile at build time."}
  - {date: "25.08.23:", desc: "Add deps needed for some audio and software compatibility."}
  - {date: "04.07.23:", desc: "Initial release."}
